(* warning: do not use wildcards for 'and'/'or' expressions because
            they create an ambiguous grammar that causes the parsing
            time to increase exponentially with the number of terms *)
Filter          ::= AndExpr | AndExpr <'or'> Filter
AndExpr         ::= Comp | Comp <'and'> AndExpr
Comp            ::= Attribute Op Value
                    | Value Op Attribute
                    | PropExpr
                    | WS <'('> Filter <')'> WS
Op              ::= '<' | '<=' | '=' | '>=' | '>' | '!='

Attribute       ::= WS NamespaceTerm (<'/'> NamespaceTerm)* WS
<NamespaceTerm> ::= (Term ':' Term) | Term
<Term>          ::= #'([a-zA-Z][\w-]*[\w]+)|[a-zA-Z]'
<Value>         ::= IntValue | DateValue | StringValue | BoolValue
IntValue        ::= WS #'\d+' WS
DateValue       ::= WS #'\d+-\d+(-\d+)?(T\d+:\d+:\d+(\.\d+)?(Z|[+-]\d+:\d+))?' WS
<StringValue>   ::= WS (DoubleQuoteString | SingleQuoteString) WS
BoolValue       ::= WS ('true' | 'false') WS
PropExpr        ::= WS <'property['> StringValue <']'> WS Op StringValue

<WS>            ::= <#'\s*'>

DoubleQuoteString ::= #"\"[^\"\\]*(?:\\.[^\"\\]*)*\""
SingleQuoteString ::= #"'[^'\\]*(?:\\.[^'\\]*)*'"
